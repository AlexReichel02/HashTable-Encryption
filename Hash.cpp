/***************************************************************
  Student Name: Alex Reichel
  File Name: Hash.cpp
  Assignment number Project 01

  Other comments regarding the file - description of why it is there, etc.
***************************************************************/

#include "Hash.hpp"
using namespace std;


/**
	 Creates a Hash Table
	 Each index in the Hash Table is a pointer containing a linked UserID and Password
*/
Hash::Hash(){

    for(int i=0;i<BUCKET;i++){
    	hashTable[i] = new User;
    	hashTable[i]->userID ="empty";
    	hashTable[i]->passWord ="empty";
    	hashTable[i]->next = NULL;

    }
}



/***
    Takes in a string parameter, Based off given UserID
    Functions searches in the hash table and returns the password linked to the given string
	If found , function returns password
	If not found, function returns No Match
*/
string Hash::findPassWord(string userID){

	int index = hashFunction(userID);
	bool foundName = false;
	string passWord;
	User *Ptr = hashTable[index];
	while(Ptr != NULL){
		if(Ptr->userID == userID){
			foundName=true;
			passWord = Ptr->passWord;
		}
		Ptr = Ptr->next;
	}
	if(foundName == true){
		return passWord;

	}else
		return "No match";
}


/***
    Takes in a string parameter, Based off given UserID
    Function breaks the string into a char array in order to accumalate their ascii values
    This function returns a random integer based off the string's values,
    integer will represent the hash table's index of the given UserID
*/
int Hash::hashFunction(string userId){

	size_t size = BUCKET-1;
	size_t total =1;
	int n = userId.size();

	 char userArray[n + 1];
	 strcpy(userArray, userId.c_str());

	for(int i=0;i<n;i++){
		total =  total  * int(userArray[i]);
	}

	 // return total % size;
	  return total % size;
}


/***
    Takes in two string parameters, representing given UserID and Password
    Function calls the hash function in order to generate a index, hashing on the userID
    Function creates a new item by assigning the given userID and password
   	function adds new item to the specific index generated by the hash function
*/
void Hash::insertItem(string userId, string passWord){

	int index = hashFunction(userId);
	if(hashTable[index]->userID == "empty"){

		hashTable[index]->userID = userId;
		hashTable[index] ->passWord = passWord;
	}else
	{
		User* Ptr = hashTable[index];
		User* n = new User;
		n->userID = userId;
		n->passWord = passWord;
		n->next = NULL;
		while(Ptr->next != NULL){
			Ptr = Ptr -> next;
		}
		Ptr->next =n;
	}

}









